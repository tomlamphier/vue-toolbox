(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{169:function(e,t,n){"use strict";n.r(t);var a=n(0),s=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",{staticClass:"content"},[n("h1",{attrs:{id:"template-5-misc"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#template-5-misc","aria-hidden":"true"}},[e._v("#")]),e._v(" Template 5 - Misc")]),e._v(" "),n("h2",{attrs:{id:"v-ref"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#v-ref","aria-hidden":"true"}},[e._v("#")]),e._v(" v-ref")]),e._v(" "),n("p",[e._v("Normally you cannot see the data in a component from the outside.  And this is part of the Vue design.  A component can notify a parent with field updates using events, so there is a way that a parent can access (albeit indirectly) a child's state.")]),e._v(" "),n("p",[e._v("But there are occasions when you need the convenience of directly accessing a component's data.  This is what you would use v-ref for.  A v-ref directive on a conponent tag saves a reference to that instance under the global $refs list.  Once you have that, you can use it with standard opject notation to get to the component's data.")]),e._v(" "),n("p",[e._v("Here is an example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('\x3c!-- a component with ref --\x3e\n<b-tab title="Neighborhoods">\n          <neighborhood-list ref="selneighborhoods"/>\n</b-tab>\n\n// code using ref \nvar nhs = this.$refs.selneighborhoods.selected_rows\nthis.selnh = []\nlet i\n  for (i=0; i<nhs.length; i++) {\n  this.selnh.push(nhs[i].neighborhood)\n}\n\n')])])])])}],!1,null,null,null);t.default=s.exports}}]);